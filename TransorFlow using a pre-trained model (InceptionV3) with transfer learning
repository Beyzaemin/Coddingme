import tensorflow as tf
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.inception_v3 import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import numpy as np

# Load pre-trained InceptionV3 model
base_model = InceptionV3(weights='imagenet', include_top=True)

# Replace the output layer with a new Dense layer for car classification
num_classes = 3  # Assuming 3 car types
x = base_model.layers[-2].output
predictions = tf.keras.layers.Dense(num_classes, activation='softmax')(x)
model = tf.keras.models.Model(inputs=base_model.input, outputs=predictions)

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Load and preprocess a car image for testing
img_path = 'path_to_your_car_image.jpg'
img = image.load_img(img_path, target_size=(299, 299))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

# Make a prediction
preds = model.predict(x)
decoded_preds = decode_predictions(preds)

# Print the predicted class and probability
print(decoded_preds)
